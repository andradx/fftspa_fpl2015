#define FX_POINT
#include "fftspa.h"
#define TEST

//#define COSIM

int c_interleaver[]={0,382,1,3,4,6,7,9,10,12,13,15,16,18,19,21,22,24,25,27,28,30,31,33,34,36,37,39,40,42,43,45,46,48,49,51,52,54,55,57,58,60,61,63,64,66,67,69,70,72,73,75,76,78,79,81,82,84,85,87,88,90,91,93,94,96,97,99,100,102,103,105,106,108,109,111,112,114,115,117,118,120,121,123,124,126,127,129,130,132,133,135,136,138,139,141,142,144,145,147,148,150,151,153,154,156,157,159,160,162,163,165,166,168,169,171,172,174,175,177,178,180,181,183,184,186,187,189,190,192,193,195,196,198,199,201,202,204,205,207,208,210,211,213,214,216,217,219,220,222,223,225,226,228,229,231,232,234,235,237,238,240,241,243,244,246,247,249,250,252,253,255,256,258,259,261,262,264,265,267,268,270,271,273,274,276,277,279,280,282,283,285,286,288,289,291,292,294,295,297,298,300,301,303,304,306,307,309,310,312,313,315,316,318,319,321,322,324,325,327,328,330,331,333,334,336,337,339,340,342,343,345,346,348,349,351,352,354,355,357,358,360,361,363,364,366,367,369,370,372,373,375,376,378,379,381,384,766,385,387,388,390,391,393,394,396,397,399,400,402,403,405,406,408,409,411,412,414,415,417,418,420,421,423,424,426,427,429,430,432,433,435,436,438,439,441,442,444,445,447,448,450,451,453,454,456,457,459,460,462,463,465,466,468,469,471,472,474,475,477,478,480,481,483,484,486,487,489,490,492,493,495,496,498,499,501,502,504,505,507,508,510,511,513,514,516,517,519,520,522,523,525,526,528,529,531,532,534,535,537,538,540,541,543,544,546,547,549,550,552,553,555,556,558,559,561,562,564,565,567,568,570,571,573,574,576,577,579,580,582,583,585,586,588,589,591,592,594,595,597,598,600,601,603,604,606,607,609,610,612,613,615,616,618,619,621,622,624,625,627,628,630,631,633,634,636,637,639,640,642,643,645,646,648,649,651,652,654,655,657,658,660,661,663,664,666,667,669,670,672,673,675,676,678,679,681,682,684,685,687,688,690,691,693,694,696,697,699,700,702,703,705,706,708,709,711,712,714,715,717,718,720,721,723,724,726,727,729,730,732,733,735,736,738,739,741,742,744,745,747,748,750,751,753,754,756,757,759,760,762,763,765,2,425,5,398,8,755,11,446,14,731,17,470,20,497,23,710,26,407,29,518,32,437,35,740,38,389,41,458,44,533,47,716,50,479,53,554,56,695,59,764,62,671,65,428,68,461,71,512,74,563,77,728,80,587,83,692,86,659,89,524,92,635,95,602,98,503,101,416,104,743,107,686,110,569,113,452,116,491,119,596,122,653,125,404,128,629,131,560,134,443,137,674,140,527,143,746,146,617,149,476,152,593,155,434,158,545,161,644,164,719,167,572,170,761,173,626,176,419,179,488,182,677,185,734,188,611,191,536,194,401,197,584,200,467,203,638,206,767,209,449,212,410,215,551,218,665,221,752,224,506,227,647,230,680,233,704,236,386,239,590,242,422,245,521,248,548,251,464,254,608,257,575,260,395,263,509,266,485,269,542,272,698,275,737,278,650,281,578,284,431,287,494,290,758,293,530,296,701,299,413,302,473,305,566,308,662,311,392,314,620,317,713,320,689,323,440,326,605,329,749,332,725,335,455,338,632,341,707,344,581,347,482,350,668,353,599,356,515,359,623,362,539,365,656,368,500,371,722,374,683,377,557,380,614,383,641};
int c_matValue[]={1,184,9,9,1,184,184,1,9,240,1,152,184,9,1,129,43,1,129,1,42,1,174,184,1,9,184,83,1,11,129,1,43,42,1,129,184,9,1,129,42,1,1,168,17,17,1,168,1,128,170,88,1,215,184,9,1,168,17,1,1,184,174,9,184,1,1,9,184,1,89,105,184,9,1,43,1,129,43,129,1,42,1,129,168,17,1,1,83,11,11,83,1,184,1,174,184,1,9,1,42,129,1,17,168,11,83,1,1,129,42,184,9,1,1,129,43,42,1,129,87,1,215,248,1,176,1,42,128,1,9,184,184,9,1,17,1,168,129,1,42,42,129,1,43,1,129,1,184,9,1,11,83,83,1,11,168,17,1,1,43,129,168,1,17,1,9,184,17,168,1,184,9,1,88,1,215,1,42,129,9,1,184,42,1,129,184,174,1,1,42,128,128,42,1,168,17,1,1,184,9,168,17,1,1,11,83,88,215,1,1,17,168,184,174,1,43,1,129,1,83,11,1,128,42,17,168,1,1,129,43,128,42,1,43,129,1,73,246,1,129,43,1,1,42,128,73,1,81,128,1,169,1,168,17,215,87,1,1,42,129,184,1,9,1,184,174,248,176,1,1,169,128,174,184,1,240,1,152,1,246,73,128,42,1,17,168,1,42,128,1,128,1,170,17,1,168,17,168,1,184,174,1,11,1,83,129,1,43,129,42,1,105,1,89,43,1,129,88,215,1,1,88,215,1,184,174,128,1,42,248,176,1,1,43,129,184,1,9,1,184,9,1,129,42,170,129,1,1,129,43,174,184,1,1,88,215,170,129,1,11,1,83,81,73,1,1,9,184,43,129,1,168,1,17,17,168,1,1,42,128,42,129,1,1,9,184,184,9,1,83,11,1,1,9,184,1,129,43,1,184,174,1,83,11,184,1,174,9,184,1,43,1,129,11,1,83,43,129,1,1,168,17,128,1,42,17,1,168,170,1,128,43,129,1,17,1,168,43,1,129,11,83,1,1,184,9,1,184,9,1,170,128,1,152,240,1,170,128,1,128,170,184,174,1,128,170,1,1,129,43,1,128,42,42,128,1,246,73,1,1,42,128,152,240,1,1,42,128,174,1,184,1,246,73,73,1,81,129,43,1,87,1,214,73,246,1,1,128,42,176,1,248,1,42,129,17,168,1,17,1,168,9,1,184,1,129,42,105,1,89,129,1,43,1,248,176,87,215,1,81,1,73,1,176,248,9,1,184,184,9,1,1,215,87,17,168,1,129,1,42,169,128,1,9,184,1,1,42,128,1,43,129,1,128,170,168,1,17,1,184,174,129,1,43,1,9,184,43,129,1,1,128,170,1,11,83,128,170,1,1,42,129,246,73,1,87,1,214,9,184,1,176,248,1,1,9,184,88,1,215,1,11,83,1,184,9,129,1,43,9,1,184,1,170,128,1,43,129,88,1,215,1,184,9,170,1,129,129,43,1,168,17,1,215,87,1,1,176,248,215,87,1,105,1,89,1,168,17,1,81,73,246,73,1,1,214,87,73,246,1,1,42,129,128,1,169,42,1,128,1,9,184,1,128,169,1,246,73,1,128,170,81,73,1,17,1,168,1,73,81,1,176,248,169,1,128,1,128,170,1,9,184,1,11,83,87,215,1,11,1,83,89,1,105,1,43,129,129,43,1,248,176,1,129,1,43,215,87,1,105,89,1,83,11,1,214,1,87,89,1,105,9,1,184,1,152,240};
int c_deinterleaver[]={0,2,512,3,4,514,5,6,516,7,8,518,9,10,520,11,12,522,13,14,524,15,16,526,17,18,528,19,20,530,21,22,532,23,24,534,25,26,536,27,28,538,29,30,540,31,32,542,33,34,544,35,36,546,37,38,548,39,40,550,41,42,552,43,44,554,45,46,556,47,48,558,49,50,560,51,52,562,53,54,564,55,56,566,57,58,568,59,60,570,61,62,572,63,64,574,65,66,576,67,68,578,69,70,580,71,72,582,73,74,584,75,76,586,77,78,588,79,80,590,81,82,592,83,84,594,85,86,596,87,88,598,89,90,600,91,92,602,93,94,604,95,96,606,97,98,608,99,100,610,101,102,612,103,104,614,105,106,616,107,108,618,109,110,620,111,112,622,113,114,624,115,116,626,117,118,628,119,120,630,121,122,632,123,124,634,125,126,636,127,128,638,129,130,640,131,132,642,133,134,644,135,136,646,137,138,648,139,140,650,141,142,652,143,144,654,145,146,656,147,148,658,149,150,660,151,152,662,153,154,664,155,156,666,157,158,668,159,160,670,161,162,672,163,164,674,165,166,676,167,168,678,169,170,680,171,172,682,173,174,684,175,176,686,177,178,688,179,180,690,181,182,692,183,184,694,185,186,696,187,188,698,189,190,700,191,192,702,193,194,704,195,196,706,197,198,708,199,200,710,201,202,712,203,204,714,205,206,716,207,208,718,209,210,720,211,212,722,213,214,724,215,216,726,217,218,728,219,220,730,221,222,732,223,224,734,225,226,736,227,228,738,229,230,740,231,232,742,233,234,744,235,236,746,237,238,748,239,240,750,241,242,752,243,244,754,245,246,756,247,248,758,249,250,760,251,252,762,253,254,764,255,1,766,256,258,669,259,260,537,261,262,719,263,264,685,265,266,515,267,268,641,269,270,595,271,272,529,273,274,653,275,276,711,277,278,579,279,280,629,281,282,673,283,284,513,285,286,555,287,288,701,289,290,615,291,292,533,293,294,727,295,296,601,297,298,519,299,300,651,301,302,587,303,304,735,305,306,539,307,308,557,309,310,679,311,312,645,313,314,523,315,316,713,317,318,611,319,320,545,321,322,743,323,324,689,325,326,631,327,328,589,329,330,703,331,332,525,333,334,757,335,336,577,337,338,661,339,340,687,341,342,559,343,344,749,345,346,531,347,348,675,349,350,571,351,352,605,353,354,707,355,356,541,357,358,639,359,360,753,361,362,691,363,364,617,365,366,677,367,368,655,369,370,547,371,372,763,373,374,599,375,376,561,377,378,715,379,380,585,381,382,623,383,384,683,385,386,699,387,388,741,389,390,643,391,392,565,393,394,671,395,396,613,397,398,591,399,400,747,401,402,575,403,404,729,405,406,681,407,408,637,409,410,765,411,412,609,413,414,721,415,416,751,417,418,627,419,420,597,421,422,737,423,424,573,425,426,647,427,428,767,429,430,619,431,432,663,433,434,697,435,436,593,437,438,755,439,440,569,441,442,717,443,444,657,445,446,745,447,448,553,449,450,603,451,452,633,453,454,665,455,456,761,457,458,583,459,460,725,461,462,567,463,464,549,465,466,693,467,468,709,469,470,667,471,472,739,473,474,527,475,476,723,477,478,543,479,480,621,481,482,759,483,484,733,485,486,563,487,488,521,489,490,635,491,492,695,493,494,535,495,496,581,497,498,607,499,500,731,501,502,659,503,504,517,505,506,705,507,508,625,509,510,551,511,257,649};

int goldenErrors[]={323,173,79,30,8,0};

#ifdef ONEWAY

///FFTSPA_Simulator
int main(){

	int argc = 6;

	int transmission=0;
	int num_error_word=0;
	int num_error_bit=0;
	struct rlimit rl;
	// ----------------------------------------------------
	// argument
	// ----------------------------------------------------
	if(argc!=6){
		printf("usage:max_iter ch code_prefix zero_cw seed\n");
		exit(0);
	}
	getrlimit(RLIMIT_STACK, &rl);
	rl.rlim_cur = 268435456;
	rl.rlim_max = 268435456;
	int result = setrlimit(RLIMIT_STACK, &rl);
	cout << "Stack increase result: " << result << endl;
	//	float ch_=atof(argv[2]);
	float ch_=atof("2.0");
#ifdef AWGN
	ch_=sqrt(1/(2.0*RATE*pow(10.0,ch_/10.0)));
#endif
	//	char * file_prefix = argv[3];
	const char * file_prefix = "../../../../BaseMatrixBig";
	//	int zero_cw=(unsigned int)atoi(argv[4]);
	int zero_cw=(unsigned int)atoi("0");
	//	unsigned int seed=(unsigned int)atoi(argv[5]);
	unsigned int seed=(unsigned int)atoi("101");

	int errorSymbols[1]={0};
	int errorWords[1]={0};
	int avgIterations[1]={seed};
	float ch[1] = {ch_};
	static int word[VARIABLE_NUM];
	static llr messages[2*GF*TOTAL_EDGE];
	static int decision[LOG_GF*VARIABLE_NUM];
	int maxIterations[1] = {6};
	float SNR[1] = {0.972849428653717041015625};

	int error_counter[1];

	int success = 0x00000000;
	int TBTEST = 1;
	for(int i = TBTEST; i < TBTEST+1; i ++){

		maxIterations[0] = i;

		FFTSPA_Simulator(messages, decision, word,
				errorSymbols,  errorWords, avgIterations, maxIterations, SNR,
				error_counter);

		cout<<"Number of Iterations/Errors: " << maxIterations[0] << "/" << error_counter[0];

		if(goldenErrors[i-1] == error_counter[0]){ cout << " PASSED" << endl; }
		else{ cout << " FAILED" << endl; success |= 1; }
	}

	if(!success)
		cout << "Test PASSED!\n" << endl;
	else
		cout << "Test FAILED!\n" << endl;


	return EXIT_SUCCESS;
}

#else if FOURWAY

///FFTSPA_Simulator
int main(){

	int argc = 6;

	int transmission=0;
	int num_error_word=0;
	int num_error_bit=0;
	struct rlimit rl;
	// ----------------------------------------------------
	// argument
	// ----------------------------------------------------
	if(argc!=6){
		printf("usage:max_iter ch code_prefix zero_cw seed\n");
		exit(0);
	}
	getrlimit(RLIMIT_STACK, &rl);
	rl.rlim_cur = 268435456;
	rl.rlim_max = 268435456;
	int result = setrlimit(RLIMIT_STACK, &rl);
	cout << "Stack increase result: " << result << endl;
	//	float ch_=atof(argv[2]);
	float ch_=atof("2.0");
#ifdef AWGN
	ch_=sqrt(1/(2.0*RATE*pow(10.0,ch_/10.0)));
#endif
	//	char * file_prefix = argv[3];
	const char * file_prefix = "../../../../BaseMatrixBig";
	//	int zero_cw=(unsigned int)atoi(argv[4]);
	int zero_cw=(unsigned int)atoi("0");
	//	unsigned int seed=(unsigned int)atoi(argv[5]);
	unsigned int seed=(unsigned int)atoi("101");

	int errorSymbols[1]={0};
	int errorWords[1]={0};
	int avgIterations[1]={seed};
	float ch[1] = {ch_};
	static int word[VARIABLE_NUM];

#ifdef ONEWAY
	static llr messages[2*GF*TOTAL_EDGE];
#endif
#ifdef FOURWAY
	static llr4 messages[2*GF*TOTAL_EDGE];
#endif
#ifdef EIGHTWAY
	static llr8 messages[2*GF*TOTAL_EDGE];
#endif
	static int decision[LOG_GF*VARIABLE_NUM];
	int maxIterations[1] = {6};
	float SNR[1] = {0.972849428653717041015625};

	int error_counter[1];

	int success = 0x00000000;
	int TBTEST = 1;
	for(int i = TBTEST; i < TBTEST+1; i ++){

		maxIterations[0] = i;

#ifdef ONEWAY
		FFTSPA_Simulator(messages, decision, word,
							  errorSymbols,  errorWords, avgIterations,
							  maxIterations, SNR, error_counter);
#endif
#ifdef FOURWAY
	FFTSPA_Simulator_4way(messages, decision, word,
						  errorSymbols,  errorWords, avgIterations,
						  maxIterations, SNR, error_counter);
#endif
#ifdef EIGHTWAY
	FFTSPA_Simulator_8way(messages, decision, word,
						  errorSymbols,  errorWords, avgIterations,
						  maxIterations, SNR, error_counter);

#endif


		cout<<"Number of Iterations/Errors: " << maxIterations[0] << "/" << error_counter[0];

		if(goldenErrors[i-1] == error_counter[0]){ cout << " PASSED" << endl; }
		else{ cout << " FAILED" << endl; success |= 1; }
	}

	if(!success)
		cout << "Test PASSED!\n" << endl;
	else
		cout << "Test FAILED!\n" << endl;


	return EXIT_SUCCESS;
}

#endif
